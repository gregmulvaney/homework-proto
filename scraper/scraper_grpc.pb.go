// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: scraper/scraper.proto

package scraper

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ScraperService_ScrapeMlFavorites_FullMethodName = "/scraper.v1.ScraperService/ScrapeMlFavorites"
)

// ScraperServiceClient is the client API for ScraperService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScraperServiceClient interface {
	ScrapeMlFavorites(ctx context.Context, in *ScrapeMlFavoritesRequest, opts ...grpc.CallOption) (*ScrapeMlFavoritesResponse, error)
}

type scraperServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewScraperServiceClient(cc grpc.ClientConnInterface) ScraperServiceClient {
	return &scraperServiceClient{cc}
}

func (c *scraperServiceClient) ScrapeMlFavorites(ctx context.Context, in *ScrapeMlFavoritesRequest, opts ...grpc.CallOption) (*ScrapeMlFavoritesResponse, error) {
	out := new(ScrapeMlFavoritesResponse)
	err := c.cc.Invoke(ctx, ScraperService_ScrapeMlFavorites_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScraperServiceServer is the server API for ScraperService service.
// All implementations must embed UnimplementedScraperServiceServer
// for forward compatibility
type ScraperServiceServer interface {
	ScrapeMlFavorites(context.Context, *ScrapeMlFavoritesRequest) (*ScrapeMlFavoritesResponse, error)
	mustEmbedUnimplementedScraperServiceServer()
}

// UnimplementedScraperServiceServer must be embedded to have forward compatible implementations.
type UnimplementedScraperServiceServer struct {
}

func (UnimplementedScraperServiceServer) ScrapeMlFavorites(context.Context, *ScrapeMlFavoritesRequest) (*ScrapeMlFavoritesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScrapeMlFavorites not implemented")
}
func (UnimplementedScraperServiceServer) mustEmbedUnimplementedScraperServiceServer() {}

// UnsafeScraperServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScraperServiceServer will
// result in compilation errors.
type UnsafeScraperServiceServer interface {
	mustEmbedUnimplementedScraperServiceServer()
}

func RegisterScraperServiceServer(s grpc.ServiceRegistrar, srv ScraperServiceServer) {
	s.RegisterService(&ScraperService_ServiceDesc, srv)
}

func _ScraperService_ScrapeMlFavorites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScrapeMlFavoritesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScraperServiceServer).ScrapeMlFavorites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScraperService_ScrapeMlFavorites_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScraperServiceServer).ScrapeMlFavorites(ctx, req.(*ScrapeMlFavoritesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ScraperService_ServiceDesc is the grpc.ServiceDesc for ScraperService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ScraperService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "scraper.v1.ScraperService",
	HandlerType: (*ScraperServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ScrapeMlFavorites",
			Handler:    _ScraperService_ScrapeMlFavorites_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "scraper/scraper.proto",
}
